library(e1071)#e1071: Provides the naiveBayes() function for classification.
library(caTools)#caTools: Contains sample.split() for train-test splitting.
library(caret)#caret: Provides tools for model training and performance evaluation (e.g., confusionMatrix()).
split<-sample.split(iris,SplitRatio = 0.7)#sample.split(): Splits the dataset into 70% training and 30% testing data.
#subset(): Creates the training and test datasets based on the split.
train_cl<-subset(iris,split == "TRUE")
test_cl<-subset(iris,split == "FALSE")
#FEATURE_SCALING
#scale(): Standardizes the numerical features to have a mean of 0 and standard deviation of 1.
train_scale<-scale(train_cl[,1:4])
test_scale<-scale(test_cl[,1:4])
#FEATURE_SCALING
#scale(): Standardizes the numerical features to have a mean of 0 and standard deviation of 1.
View(iris)
#Naive Bayes
library(e1071) #provides the naive bayes classification classifier
library(caTools) # contains splitting datasets =>sample.split()
library(caret) # model used to evaluate model performance ( such as its made the confusion matrix)
split<-sample.split(iris,SplitRatio = 0.7) # split the dataset into 70% training and 30% testing dataset
#subset create the 70% of the dataset(on training dataset) and 30% of the dataset(on testing dataset)
train_cl<-subset(iris,split == TRUE)
test_cl<-subset(iris,split == FALSE)
#Scale feature used to standardize the numerical features(column 1 to column 4). This transformation ensures that will have a mean 0 and standard deviation 1
train_scale<- scale(train_c[,1:4])
test_scale<- scale(test_c[,1:4])
#Scale feature used to standardize the numerical features(column 1 to column 4). This transformation ensures that will have a mean 0 and standard deviation 1
train_scale<- scale(train_cl[,1:4])
test_scale<- scale(test_cl[,1:4])
set.seed(120)#make result reproducible by fixing the random state
classifier_cl<-naiveBayes(Species ~ ., data = train_cl)#naive bayes with species as the target(dependent variable) and all other features as a independent variables
y_pred<-predict(classifier_cl,newdata = test_cl) #used the training model to predict the species for the test dataset.
#confusion matrix - provides the detailed performs metrics (like precision, recall, and accuracy)
#diag(cm) - retrieves the diagonal elements()
cm<-table(test_cl$Species,y_pred)
a = confusionMatrix(cm)
acc = sum(diag(cm))/sum(cm)
acc
data <- read.csv(file.choose())
View(data)
#Topic->Decision Tree
# USED FOR-> CLASSIFICATION AND REGRESSION
View(iris)
# ctree()
data=iris
indexes=sample(150,110)
